{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Face Generation\n",
    "\n",
    "In this project, you'll define and train a DCGAN on a dataset of faces. Your goal is to get a generator network to generate *new* images of faces that look as realistic as possible!\n",
    "\n",
    "The project will be broken down into a series of tasks from **loading in data to defining and training adversarial networks**. At the end of the notebook, you'll be able to visualize the results of your trained Generator to see how it performs; your generated samples should look like fairly realistic faces with small amounts of noise.\n",
    "\n",
    "### Get the Data\n",
    "\n",
    "You'll be using the [CelebFaces Attributes Dataset (CelebA)](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) to train your adversarial networks.\n",
    "\n",
    "This dataset is more complex than the number datasets (like MNIST or SVHN) you've been working with, and so, you should prepare to define deeper networks and train them for a longer time to get good results. It is suggested that you utilize a GPU for training.\n",
    "\n",
    "### Pre-processed Data\n",
    "\n",
    "Since the project's main focus is on building the GANs, we've done *some* of the pre-processing for you. Each of the CelebA images has been cropped to remove parts of the image that don't include a face, then resized down to 64x64x3 NumPy images. Some sample data is show below.\n",
    "\n",
    "<img src='assets/processed_face_data.png' width=60% />\n",
    "\n",
    "> If you are working locally, you can download this data [by clicking here](https://s3.amazonaws.com/video.udacity-data.com/topher/2018/November/5be7eb6f_processed-celeba-small/processed-celeba-small.zip)\n",
    "\n",
    "This is a zip file that you'll need to extract in the home directory of this notebook for further loading and processing. After extracting the data, you should be left with a directory of data `processed_celeba_small/`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# can comment out after executing\n",
    "#!unzip processed_celeba_small.zip\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'processed_celeba_small/'\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "import pickle as pkl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import problem_unittests as tests\n",
    "#import helper\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize the CelebA Data\n",
    "\n",
    "The [CelebA](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) dataset contains over 200,000 celebrity images with annotations. Since you're going to be generating faces, you won't need the annotations, you'll only need the images. Note that these are color images with [3 color channels (RGB)](https://en.wikipedia.org/wiki/Channel_(digital_image)#RGB_Images) each.\n",
    "\n",
    "### Pre-process and Load the Data\n",
    "\n",
    "Since the project's main focus is on building the GANs, we've done *some* of the pre-processing for you. Each of the CelebA images has been cropped to remove parts of the image that don't include a face, then resized down to 64x64x3 NumPy images. This *pre-processed* dataset is a smaller subset of the very large CelebA data.\n",
    "\n",
    "> There are a few other steps that you'll need to **transform** this data and create a **DataLoader**.\n",
    "\n",
    "#### Exercise: Complete the following `get_dataloader` function, such that it satisfies these requirements:\n",
    "\n",
    "* Your images should be square, Tensor images of size `image_size x image_size` in the x and y dimension.\n",
    "* Your function should return a DataLoader that shuffles and batches these Tensor images.\n",
    "\n",
    "#### ImageFolder\n",
    "\n",
    "To create a dataset given a directory of images, it's recommended that you use PyTorch's [ImageFolder](https://pytorch.org/docs/stable/torchvision/datasets.html#imagefolder) wrapper, with a root directory `processed_celeba_small/` and data transformation passed in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# necessary imports\n",
    "\n",
    "import torch\n",
    "from torchvision import datasets\n",
    "from torchvision import transforms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_dataloader(batch_size, image_size, data_dir='processed_celeba_small/'):\n",
    "    \"\"\"\n",
    "    Batch the neural network data using DataLoader\n",
    "    :param batch_size: The size of each batch; the number of images in a batch\n",
    "    :param img_size: The square size of the image data (x, y)\n",
    "    :param data_dir: Directory where image data is located\n",
    "    :return: DataLoader with batched data\n",
    "    \"\"\"\n",
    "    \n",
    "    # TODO: Implement function and return a dataloader\n",
    "    \n",
    "    transform = transforms.Compose([\n",
    "                    transforms.Resize(image_size),\n",
    "                    transforms.ToTensor()\n",
    "                ])\n",
    "    my_dataset = datasets.ImageFolder(data_dir, \n",
    "                                      transform = transform)\n",
    "    \n",
    "    # TODO: Implement function and return a dataloader\n",
    "    data_loader = torch.utils.data.DataLoader(dataset = my_dataset,\n",
    "                                               batch_size = batch_size,\n",
    "                                               shuffle = True)\n",
    "    \n",
    "    return data_loader\n",
    "    #return None\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a DataLoader\n",
    "\n",
    "#### Exercise: Create a DataLoader `celeba_train_loader` with appropriate hyperparameters.\n",
    "\n",
    "Call the above function and create a dataloader to view images. \n",
    "* You can decide on any reasonable `batch_size` parameter\n",
    "* Your `image_size` **must be** `32`. Resizing the data to a smaller size will make for faster training, while still creating convincing images of faces!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define function hyperparameters\n",
    "batch_size = 128\n",
    "img_size = 32\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "# Call your function and get a dataloader\n",
    "celeba_train_loader = get_dataloader(batch_size, img_size)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, you can view some images! You should seen square images of somewhat-centered faces.\n",
    "\n",
    "Note: You'll need to convert the Tensor images into a NumPy type and transpose the dimensions to correctly display an image, suggested `imshow` code is below, but it may not be perfect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f512241de80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# helper display function\n",
    "def imshow(img):\n",
    "    npimg = img.numpy()\n",
    "    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "# obtain one batch of training images\n",
    "dataiter = iter(celeba_train_loader)\n",
    "images, _ = dataiter.next() # _ for no labels\n",
    "\n",
    "# plot the images in the batch, along with the corresponding labels\n",
    "fig = plt.figure(figsize=(20, 4))\n",
    "plot_size=20\n",
    "for idx in np.arange(plot_size):\n",
    "    ax = fig.add_subplot(2, plot_size/2, idx+1, xticks=[], yticks=[])\n",
    "    imshow(images[idx])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercise: Pre-process your image data and scale it to a pixel range of -1 to 1\n",
    "\n",
    "You need to do a bit of pre-processing; you know that the output of a `tanh` activated generator will contain pixel values in a range from -1 to 1, and so, we need to rescale our training images to a range of -1 to 1. (Right now, they are in a range from 0-1.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Complete the scale function\n",
    "def scale(x, feature_range=(-1, 1)):\n",
    "    ''' Scale takes in an image x and returns that image, scaled\n",
    "       with a feature_range of pixel values from -1 to 1. \n",
    "       This function assumes that the input x is already scaled from 0-1.'''\n",
    "    # assume x is scaled to (0, 1)\n",
    "    # scale to feature_range and return scaled x\n",
    "    min, max = feature_range\n",
    "    x = x * (max - min) + min\n",
    "    \n",
    "    return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Min:  tensor(-0.9922)\n",
      "Max:  tensor(1.)\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "# check scaled range\n",
    "# should be close to -1 to 1\n",
    "img = images[0]\n",
    "scaled_img = scale(img)\n",
    "\n",
    "print('Min: ', scaled_img.min())\n",
    "print('Max: ', scaled_img.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "# Define the Model\n",
    "\n",
    "A GAN is comprised of two adversarial networks, a discriminator and a generator.\n",
    "\n",
    "## Discriminator\n",
    "\n",
    "Your first task will be to define the discriminator. This is a convolutional classifier like you've built before, only without any maxpooling layers. To deal with this complex data, it's suggested you use a deep network with **normalization**. You are also allowed to create any helper functions that may be useful.\n",
    "\n",
    "#### Exercise: Complete the Discriminator class\n",
    "* The inputs to the discriminator are 32x32x3 tensor images\n",
    "* The output should be a single value that will indicate whether a given image is real or fake\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#added mine: \n",
    "def conv(in_channels, out_channels, kernel_size, stride=2, padding=1, batch_norm=True):\n",
    "        \"\"\"Creates a convolutional layer, with optional batch normalization.\n",
    "        \"\"\"\n",
    "        layers = []\n",
    "        conv_layer = nn.Conv2d(in_channels, out_channels, \n",
    "                               kernel_size, stride, padding, bias=False)\n",
    "\n",
    "        # append conv layer\n",
    "        layers.append(conv_layer)\n",
    "\n",
    "        if batch_norm:\n",
    "            # append batchnorm layer\n",
    "            layers.append(nn.BatchNorm2d(out_channels))\n",
    "\n",
    "        # using Sequential container\n",
    "        return nn.Sequential(*layers)   \n",
    "\n",
    "class Discriminator(nn.Module):\n",
    "    def __init__(self, conv_dim):\n",
    "        \"\"\"\n",
    "        Initialize the Discriminator Module\n",
    "        :param conv_dim: The depth of the first convolutional layer\n",
    "        \"\"\"\n",
    "        super(Discriminator, self).__init__()\n",
    "\n",
    "        # complete init function\n",
    "        self.conv_dim = conv_dim\n",
    "        # 32x32 input\n",
    "        self.conv1 = conv(3, conv_dim, 4, batch_norm=False) # first layer, no batch_norm\n",
    "        # 16x16 out\n",
    "        self.conv2 = conv(conv_dim, conv_dim*2, 4)\n",
    "        # 8x8 out\n",
    "        self.conv3 = conv(conv_dim*2, conv_dim*4, 4)\n",
    "        # 4x4 out\n",
    "        # final, fully-connected layer\n",
    "        self.fc = nn.Linear(conv_dim*4*4*4, 1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward propagation of the neural network\n",
    "        :param x: The input to the neural network     \n",
    "        :return: Discriminator logits; the output of the neural network\n",
    "        \"\"\"\n",
    "        #  define feedforward behavior\n",
    "        output = F.leaky_relu(self.conv1(x), 0.2)\n",
    "        output = F.leaky_relu(self.conv2(output), 0.2)\n",
    "        output = F.leaky_relu(self.conv3(output), 0.2)\n",
    "        \n",
    "        # flatten\n",
    "        output = output.view(-1, self.conv_dim*4*4*4)\n",
    "        \n",
    "        # final output layer\n",
    "        output = self.fc(output)        \n",
    "        return output\n",
    "        #return x\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_discriminator(Discriminator)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generator\n",
    "\n",
    "The generator should upsample an input and generate a *new* image of the same size as our training data `32x32x3`. This should be mostly transpose convolutional layers with normalization applied to the outputs.\n",
    "\n",
    "#### Exercise: Complete the Generator class\n",
    "* The inputs to the generator are vectors of some length `z_size`\n",
    "* The output should be a image of shape `32x32x3`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tests Passed\n"
     ]
    }
   ],
   "source": [
    "#added mine:\n",
    "# helper deconv function\n",
    "def deconv(in_channels, out_channels, kernel_size, stride=2, padding=1, batch_norm=True):\n",
    "    \"\"\"Creates a transposed-convolutional layer, with optional batch normalization.\n",
    "    \"\"\"\n",
    "    # create a sequence of transpose + optional batch norm layers\n",
    "    layers = []\n",
    "    transpose_conv_layer = nn.ConvTranspose2d(in_channels, out_channels, \n",
    "                                              kernel_size, stride, padding, bias=False)\n",
    "    # append transpose convolutional layer\n",
    "    layers.append(transpose_conv_layer)\n",
    "    \n",
    "    if batch_norm:\n",
    "        # append batchnorm layer\n",
    "        layers.append(nn.BatchNorm2d(out_channels))\n",
    "        \n",
    "    return nn.Sequential(*layers)\n",
    "\n",
    "class Generator(nn.Module):\n",
    "    \n",
    "    def __init__(self, z_size, conv_dim):\n",
    "        \"\"\"\n",
    "        Initialize the Generator Module\n",
    "        :param z_size: The length of the input latent vector, z\n",
    "        :param conv_dim: The depth of the inputs to the *last* transpose convolutional layer\n",
    "        \"\"\"\n",
    "        super(Generator, self).__init__()\n",
    "\n",
    "        # complete init function\n",
    "        self.conv_dim = conv_dim\n",
    "        \n",
    "        # first, fully-connected layer\n",
    "        self.fc = nn.Linear(z_size, conv_dim*4*4*4)\n",
    "\n",
    "        # transpose conv layers\n",
    "        self.t_conv1 = deconv(conv_dim*4, conv_dim*2, 4)\n",
    "        self.t_conv2 = deconv(conv_dim*2, conv_dim, 4)\n",
    "        self.t_conv3 = deconv(conv_dim, 3, 4, batch_norm=False)\n",
    "\n",
    "    def forward(self, x):\n",
    "        \"\"\"\n",
    "        Forward propagation of the neural network\n",
    "        :param x: The input to the neural network     \n",
    "        :return: A 32x32x3 Tensor image as output\n",
    "        \"\"\"\n",
    "        # define feedforward behavior\n",
    "        # fully-connected + reshape \n",
    "        output = self.fc(x)\n",
    "        output = output.view(-1, self.conv_dim*4, 4, 4) # (batch_size, depth, 4, 4)\n",
    "        \n",
    "        # hidden transpose conv layers + relu\n",
    "        output = F.relu(self.t_conv1(output))\n",
    "        output = F.relu(self.t_conv2(output))\n",
    "        \n",
    "        # last layer + tanh activation\n",
    "        output = self.t_conv3(output)\n",
    "        output = F.tanh(output)\n",
    "        \n",
    "        return output\n",
    "        #return x\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "tests.test_generator(Generator)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialize the weights of your networks\n",
    "\n",
    "To help your models converge, you should initialize the weights of the convolutional and linear layers in your model. From reading the [original DCGAN paper](https://arxiv.org/pdf/1511.06434.pdf), they say:\n",
    "> All weights were initialized from a zero-centered Normal distribution with standard deviation 0.02.\n",
    "\n",
    "So, your next task will be to define a weight initialization function that does just this!\n",
    "\n",
    "You can refer back to the lesson on weight initialization or even consult existing model code, such as that from [the `networks.py` file in CycleGAN Github repository](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/master/models/networks.py) to help you complete this function.\n",
    "\n",
    "#### Exercise: Complete the weight initialization function\n",
    "\n",
    "* This should initialize only **convolutional** and **linear** layers\n",
    "* Initialize the weights to a normal distribution, centered around 0, with a standard deviation of 0.02.\n",
    "* The bias terms, if they exist, may be left alone or set to 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def weights_init_normal(m):\n",
    "    \"\"\"\n",
    "    Applies initial weights to certain layers in a model .\n",
    "    The weights are taken from a normal distribution \n",
    "    with mean = 0, std dev = 0.02.\n",
    "    :param m: A module or layer in a network    \n",
    "    \"\"\"\n",
    "    # classname will be something like:\n",
    "    # `Conv`, `BatchNorm2d`, `Linear`, etc.\n",
    "    classname = m.__class__.__name__\n",
    "    \n",
    "    # TODO: Apply initial weights to convolutional and linear layers\n",
    "    if hasattr(m, 'weight') and (classname.find('Conv') != -1 or classname.find('Linear') != -1):\n",
    "        nn.init.normal(m.weight.data, 0.0, 0.2)\n",
    "        \n",
    "    if hasattr(m, 'bias') and m.bias is not None:\n",
    "        nn.init.constant(m.bias.data, 0.0)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Build complete network\n",
    "\n",
    "Define your models' hyperparameters and instantiate the discriminator and generator from the classes defined above. Make sure you've passed in the correct input arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "def build_network(d_conv_dim, g_conv_dim, z_size):\n",
    "    # define discriminator and generator\n",
    "    D = Discriminator(d_conv_dim)\n",
    "    G = Generator(z_size=z_size, conv_dim=g_conv_dim)\n",
    "\n",
    "    # initialize model weights\n",
    "    D.apply(weights_init_normal)\n",
    "    G.apply(weights_init_normal)\n",
    "\n",
    "    print(D)\n",
    "    print()\n",
    "    print(G)\n",
    "    \n",
    "    return D, G\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercise: Define model hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Discriminator(\n",
      "  (conv1): Sequential(\n",
      "    (0): Conv2d(3, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "  )\n",
      "  (conv2): Sequential(\n",
      "    (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  )\n",
      "  (conv3): Sequential(\n",
      "    (0): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  )\n",
      "  (fc): Linear(in_features=2048, out_features=1, bias=True)\n",
      ")\n",
      "\n",
      "Generator(\n",
      "  (fc): Linear(in_features=100, out_features=2048, bias=True)\n",
      "  (t_conv1): Sequential(\n",
      "    (0): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  )\n",
      "  (t_conv2): Sequential(\n",
      "    (0): ConvTranspose2d(64, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  )\n",
      "  (t_conv3): Sequential(\n",
      "    (0): ConvTranspose2d(32, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "  )\n",
      ")\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:14: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.\n",
      "  \n",
      "/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:17: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.\n"
     ]
    }
   ],
   "source": [
    "# Define model hyperparams\n",
    "d_conv_dim = 32\n",
    "g_conv_dim = 32\n",
    "z_size = 100\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n",
    "\"\"\"\n",
    "D, G = build_network(d_conv_dim, g_conv_dim, z_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training on GPU\n",
    "\n",
    "Check if you can train on GPU. Here, we'll set this as a boolean variable `train_on_gpu`. Later, you'll be responsible for making sure that \n",
    ">* Models,\n",
    "* Model inputs, and\n",
    "* Loss function arguments\n",
    "\n",
    "Are moved to GPU, where appropriate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on GPU!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "import torch\n",
    "\n",
    "# Check for a GPU\n",
    "train_on_gpu = torch.cuda.is_available()\n",
    "if not train_on_gpu:\n",
    "    print('No GPU found. Please use a GPU to train your neural network.')\n",
    "else:\n",
    "    print('Training on GPU!')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Discriminator and Generator Losses\n",
    "\n",
    "Now we need to calculate the losses for both types of adversarial networks.\n",
    "\n",
    "### Discriminator Losses\n",
    "\n",
    "> * For the discriminator, the total loss is the sum of the losses for real and fake images, `d_loss = d_real_loss + d_fake_loss`. \n",
    "* Remember that we want the discriminator to output 1 for real images and 0 for fake images, so we need to set up the losses to reflect that.\n",
    "\n",
    "\n",
    "### Generator Loss\n",
    "\n",
    "The generator loss will look similar only with flipped labels. The generator's goal is to get the discriminator to *think* its generated images are *real*.\n",
    "\n",
    "#### Exercise: Complete real and fake loss functions\n",
    "\n",
    "**You may choose to use either cross entropy or a least squares error loss to complete the following `real_loss` and `fake_loss` functions.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def real_loss(D_out):\n",
    "    '''Calculates how close discriminator outputs are to being real.\n",
    "       param, D_out: discriminator logits\n",
    "       return: real loss'''\n",
    "    batch_size = D_out.size(0)\n",
    "    labels = torch.ones(batch_size)\n",
    "    \n",
    "    if train_on_gpu:\n",
    "        labels = labels.cuda()\n",
    "\n",
    "    criterion = nn.BCEWithLogitsLoss()\n",
    "    loss = criterion(D_out.squeeze(), labels) \n",
    "    return loss\n",
    "\n",
    "def fake_loss(D_out):\n",
    "    '''Calculates how close discriminator outputs are to being fake.\n",
    "       param, D_out: discriminator logits\n",
    "       return: fake loss'''\n",
    "    batch_size = D_out.size(0)\n",
    "    labels = torch.zeros(batch_size)\n",
    "    \n",
    "    if train_on_gpu:\n",
    "        labels = labels.cuda()\n",
    "        \n",
    "    criterion = nn.BCEWithLogitsLoss()\n",
    "    loss = criterion(D_out.squeeze(), labels) \n",
    "    return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimizers\n",
    "\n",
    "#### Exercise: Define optimizers for your Discriminator (D) and Generator (G)\n",
    "\n",
    "Define optimizers for your models with appropriate hyperparameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.optim as optim\n",
    "\n",
    "# params\n",
    "lr = 0.0002\n",
    "beta1=0.5\n",
    "beta2=0.999 # default value\n",
    "\n",
    "# Create optimizers for the discriminator D and generator G\n",
    "d_optimizer = optim.Adam(D.parameters(), lr, [beta1, beta2])\n",
    "g_optimizer = optim.Adam(G.parameters(), lr, [beta1, beta2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Training\n",
    "\n",
    "Training will involve alternating between training the discriminator and the generator. You'll use your functions `real_loss` and `fake_loss` to help you calculate the discriminator losses.\n",
    "\n",
    "* You should train the discriminator by alternating on real and fake images\n",
    "* Then the generator, which tries to trick the discriminator and should have an opposing loss function\n",
    "\n",
    "\n",
    "#### Saving Samples\n",
    "\n",
    "You've been given some code to print out some loss statistics and save some generated \"fake\" samples."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercise: Complete the training function\n",
    "\n",
    "Keep in mind that, if you've moved your models to GPU, you'll also have to move any model inputs to GPU."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(D, G, n_epochs, print_every=50):\n",
    "    '''Trains adversarial networks for some number of epochs\n",
    "       param, D: the discriminator network\n",
    "       param, G: the generator network\n",
    "       param, n_epochs: number of epochs to train for\n",
    "       param, print_every: when to print and record the models' losses\n",
    "       return: D and G losses'''\n",
    "    \n",
    "    # move models to GPU\n",
    "    if train_on_gpu:\n",
    "        D.cuda()\n",
    "        G.cuda()\n",
    "\n",
    "    # keep track of loss and generated, \"fake\" samples\n",
    "    samples = []\n",
    "    losses = []\n",
    "\n",
    "    # Get some fixed data for sampling. These are images that are held\n",
    "    # constant throughout training, and allow us to inspect the model's performance\n",
    "    sample_size=16\n",
    "    fixed_z = np.random.uniform(-1, 1, size=(sample_size, z_size))\n",
    "    fixed_z = torch.from_numpy(fixed_z).float()\n",
    "    # move z to GPU if available\n",
    "    if train_on_gpu:\n",
    "        fixed_z = fixed_z.cuda()\n",
    "\n",
    "    # epoch training loop\n",
    "    for epoch in range(n_epochs):\n",
    "\n",
    "        # batch training loop\n",
    "        for batch_i, (real_images, _) in enumerate(celeba_train_loader):\n",
    "\n",
    "            batch_size = real_images.size(0)\n",
    "            real_images = scale(real_images)\n",
    "\n",
    "            # ===============================================\n",
    "            #         YOUR CODE HERE: TRAIN THE NETWORKS\n",
    "            # ===============================================\n",
    "            \n",
    "            # 1. Train the discriminator on real and fake images\n",
    "            #d_loss = \n",
    "\n",
    "            # 2. Train the generator with an adversarial loss\n",
    "            #g_loss = \n",
    "            \n",
    "            # 1. Train the discriminator on real and fake images\n",
    "            d_optimizer.zero_grad()\n",
    "            \n",
    "            # Compute the discriminator losses on real images \n",
    "            if train_on_gpu:\n",
    "                real_images = real_images.cuda()\n",
    "                \n",
    "            D_real = D(real_images)\n",
    "            d_real_loss = real_loss(D_real)\n",
    "\n",
    "            # Generate fake images\n",
    "            z = np.random.uniform(-1, 1, size=(batch_size, z_size))\n",
    "            z = torch.from_numpy(z).float()\n",
    "\n",
    "            # move x to GPU, if available\n",
    "            if train_on_gpu:\n",
    "                z = z.cuda()\n",
    "                \n",
    "            fake_images = G(z)\n",
    "            \n",
    "            D_fake = D(fake_images)\n",
    "            d_fake_loss = fake_loss(D_fake)\n",
    "            # add up loss and perform backprop\n",
    "            d_loss = d_real_loss + d_fake_loss\n",
    "            d_loss.backward(retain_graph = True)\n",
    "            d_optimizer.step()            \n",
    "            \n",
    "            # 2. Train the generator with an adversarial loss\n",
    "            g_optimizer.zero_grad()\n",
    "            \n",
    "            # Compute the discriminator losses on fake images \n",
    "            # using flipped labels!\n",
    "            D_fake = D(fake_images)\n",
    "            g_loss = real_loss(D_fake) # use real loss to flip labels\n",
    "        \n",
    "            # perform backprop\n",
    "            g_loss.backward()\n",
    "            g_optimizer.step()\n",
    "            \n",
    "            \n",
    "            # ===============================================\n",
    "            #              END OF YOUR CODE\n",
    "            # ===============================================\n",
    "\n",
    "            # Print some loss stats\n",
    "            if batch_i % print_every == 0:\n",
    "                # append discriminator loss and generator loss\n",
    "                losses.append((d_loss.item(), g_loss.item()))\n",
    "                # print discriminator and generator loss\n",
    "                print('Epoch [{:5d}/{:5d}] | d_loss: {:6.4f} | g_loss: {:6.4f}'.format(\n",
    "                        epoch+1, n_epochs, d_loss.item(), g_loss.item()))\n",
    "\n",
    "\n",
    "        ## AFTER EACH EPOCH##    \n",
    "        # this code assumes your generator is named G, feel free to change the name\n",
    "        # generate and save sample, fake images\n",
    "        G.eval() # for generating samples\n",
    "        samples_z = G(fixed_z)\n",
    "        samples.append(samples_z)\n",
    "        G.train() # back to training mode\n",
    "\n",
    "    # Save training generator samples\n",
    "    with open('train_samples.pkl', 'wb') as f:\n",
    "        pkl.dump(samples, f)\n",
    "    \n",
    "    # finally return losses\n",
    "    return losses"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set your number of training epochs and train your GAN!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [    1/   50] | d_loss: 0.5328 | g_loss: 2.1146\n",
      "Epoch [    1/   50] | d_loss: 0.4420 | g_loss: 1.9599\n",
      "Epoch [    1/   50] | d_loss: 0.7303 | g_loss: 1.5212\n",
      "Epoch [    1/   50] | d_loss: 0.6852 | g_loss: 1.6005\n",
      "Epoch [    1/   50] | d_loss: 0.7365 | g_loss: 1.7341\n",
      "Epoch [    1/   50] | d_loss: 0.8533 | g_loss: 1.9673\n",
      "Epoch [    1/   50] | d_loss: 0.5486 | g_loss: 2.0937\n",
      "Epoch [    1/   50] | d_loss: 0.5973 | g_loss: 1.8244\n",
      "Epoch [    1/   50] | d_loss: 0.6902 | g_loss: 1.4896\n",
      "Epoch [    1/   50] | d_loss: 0.7089 | g_loss: 1.6026\n",
      "Epoch [    1/   50] | d_loss: 0.8088 | g_loss: 1.7814\n",
      "Epoch [    1/   50] | d_loss: 0.6810 | g_loss: 1.5157\n",
      "Epoch [    1/   50] | d_loss: 0.8370 | g_loss: 2.2900\n",
      "Epoch [    1/   50] | d_loss: 0.7510 | g_loss: 1.5406\n",
      "Epoch [    1/   50] | d_loss: 0.5685 | g_loss: 1.8366\n",
      "Epoch [    2/   50] | d_loss: 0.6889 | g_loss: 1.7235\n",
      "Epoch [    2/   50] | d_loss: 0.5967 | g_loss: 1.7298\n",
      "Epoch [    2/   50] | d_loss: 0.6362 | g_loss: 1.9700\n",
      "Epoch [    2/   50] | d_loss: 0.7951 | g_loss: 1.3258\n",
      "Epoch [    2/   50] | d_loss: 0.8222 | g_loss: 1.7147\n",
      "Epoch [    2/   50] | d_loss: 0.7262 | g_loss: 1.5791\n",
      "Epoch [    2/   50] | d_loss: 0.6581 | g_loss: 1.8292\n",
      "Epoch [    2/   50] | d_loss: 0.5994 | g_loss: 1.7929\n",
      "Epoch [    2/   50] | d_loss: 0.6320 | g_loss: 1.9308\n",
      "Epoch [    2/   50] | d_loss: 0.7827 | g_loss: 1.3437\n",
      "Epoch [    2/   50] | d_loss: 0.5570 | g_loss: 1.9423\n",
      "Epoch [    2/   50] | d_loss: 0.7104 | g_loss: 1.6251\n",
      "Epoch [    2/   50] | d_loss: 0.7396 | g_loss: 1.5874\n",
      "Epoch [    2/   50] | d_loss: 0.4918 | g_loss: 2.0197\n",
      "Epoch [    2/   50] | d_loss: 0.5901 | g_loss: 1.8827\n",
      "Epoch [    3/   50] | d_loss: 0.7025 | g_loss: 1.8579\n",
      "Epoch [    3/   50] | d_loss: 0.9268 | g_loss: 1.4465\n",
      "Epoch [    3/   50] | d_loss: 0.8217 | g_loss: 1.4309\n",
      "Epoch [    3/   50] | d_loss: 0.4265 | g_loss: 3.0221\n",
      "Epoch [    3/   50] | d_loss: 0.9218 | g_loss: 0.7452\n",
      "Epoch [    3/   50] | d_loss: 0.7086 | g_loss: 1.7710\n",
      "Epoch [    3/   50] | d_loss: 0.5867 | g_loss: 1.7908\n",
      "Epoch [    3/   50] | d_loss: 0.6943 | g_loss: 1.7889\n",
      "Epoch [    3/   50] | d_loss: 0.5628 | g_loss: 1.9386\n",
      "Epoch [    3/   50] | d_loss: 0.6479 | g_loss: 1.8579\n",
      "Epoch [    3/   50] | d_loss: 0.5549 | g_loss: 2.3549\n",
      "Epoch [    3/   50] | d_loss: 0.5365 | g_loss: 1.8333\n",
      "Epoch [    3/   50] | d_loss: 0.6260 | g_loss: 1.8107\n",
      "Epoch [    3/   50] | d_loss: 0.6048 | g_loss: 1.6215\n",
      "Epoch [    3/   50] | d_loss: 0.7136 | g_loss: 1.7606\n",
      "Epoch [    4/   50] | d_loss: 0.8580 | g_loss: 1.8563\n",
      "Epoch [    4/   50] | d_loss: 0.7805 | g_loss: 1.6740\n",
      "Epoch [    4/   50] | d_loss: 0.5784 | g_loss: 2.1000\n",
      "Epoch [    4/   50] | d_loss: 0.3735 | g_loss: 2.3827\n",
      "Epoch [    4/   50] | d_loss: 0.6112 | g_loss: 1.5779\n",
      "Epoch [    4/   50] | d_loss: 0.8014 | g_loss: 1.6279\n",
      "Epoch [    4/   50] | d_loss: 0.5748 | g_loss: 2.1339\n",
      "Epoch [    4/   50] | d_loss: 0.6074 | g_loss: 1.9645\n",
      "Epoch [    4/   50] | d_loss: 1.0096 | g_loss: 1.4916\n",
      "Epoch [    4/   50] | d_loss: 0.7016 | g_loss: 1.6587\n",
      "Epoch [    4/   50] | d_loss: 0.5344 | g_loss: 2.1105\n",
      "Epoch [    4/   50] | d_loss: 0.6309 | g_loss: 1.4519\n",
      "Epoch [    4/   50] | d_loss: 0.7801 | g_loss: 1.6154\n",
      "Epoch [    4/   50] | d_loss: 0.8433 | g_loss: 1.3393\n",
      "Epoch [    4/   50] | d_loss: 0.6514 | g_loss: 1.7273\n",
      "Epoch [    5/   50] | d_loss: 0.6563 | g_loss: 2.0094\n",
      "Epoch [    5/   50] | d_loss: 0.6911 | g_loss: 1.6959\n",
      "Epoch [    5/   50] | d_loss: 0.6394 | g_loss: 1.7875\n",
      "Epoch [    5/   50] | d_loss: 0.7568 | g_loss: 1.9273\n",
      "Epoch [    5/   50] | d_loss: 0.7715 | g_loss: 1.4515\n",
      "Epoch [    5/   50] | d_loss: 0.7568 | g_loss: 1.6236\n",
      "Epoch [    5/   50] | d_loss: 0.7628 | g_loss: 1.5733\n",
      "Epoch [    5/   50] | d_loss: 0.8009 | g_loss: 1.8213\n",
      "Epoch [    5/   50] | d_loss: 0.8660 | g_loss: 1.2192\n",
      "Epoch [    5/   50] | d_loss: 0.6914 | g_loss: 1.9795\n",
      "Epoch [    5/   50] | d_loss: 0.5269 | g_loss: 2.1476\n",
      "Epoch [    5/   50] | d_loss: 0.9670 | g_loss: 1.2595\n",
      "Epoch [    5/   50] | d_loss: 0.6793 | g_loss: 1.7010\n",
      "Epoch [    5/   50] | d_loss: 0.7639 | g_loss: 1.6316\n",
      "Epoch [    5/   50] | d_loss: 0.6060 | g_loss: 1.9523\n",
      "Epoch [    6/   50] | d_loss: 0.4434 | g_loss: 2.3393\n",
      "Epoch [    6/   50] | d_loss: 0.7411 | g_loss: 2.1321\n",
      "Epoch [    6/   50] | d_loss: 0.6611 | g_loss: 1.9272\n",
      "Epoch [    6/   50] | d_loss: 0.4895 | g_loss: 2.2085\n",
      "Epoch [    6/   50] | d_loss: 0.5789 | g_loss: 2.2114\n",
      "Epoch [    6/   50] | d_loss: 0.6188 | g_loss: 1.9168\n",
      "Epoch [    6/   50] | d_loss: 0.7231 | g_loss: 1.7524\n",
      "Epoch [    6/   50] | d_loss: 0.6858 | g_loss: 2.1596\n",
      "Epoch [    6/   50] | d_loss: 0.5833 | g_loss: 1.9813\n",
      "Epoch [    6/   50] | d_loss: 0.9801 | g_loss: 2.0067\n",
      "Epoch [    6/   50] | d_loss: 0.6534 | g_loss: 1.8284\n",
      "Epoch [    6/   50] | d_loss: 0.5395 | g_loss: 1.8738\n",
      "Epoch [    6/   50] | d_loss: 0.6731 | g_loss: 1.6128\n",
      "Epoch [    6/   50] | d_loss: 0.6251 | g_loss: 1.9521\n",
      "Epoch [    6/   50] | d_loss: 0.7146 | g_loss: 1.8275\n",
      "Epoch [    7/   50] | d_loss: 1.0626 | g_loss: 1.7116\n",
      "Epoch [    7/   50] | d_loss: 0.8110 | g_loss: 1.5355\n",
      "Epoch [    7/   50] | d_loss: 0.6291 | g_loss: 1.5276\n",
      "Epoch [    7/   50] | d_loss: 0.4629 | g_loss: 1.9660\n",
      "Epoch [    7/   50] | d_loss: 0.5423 | g_loss: 2.4336\n",
      "Epoch [    7/   50] | d_loss: 0.5616 | g_loss: 1.9667\n",
      "Epoch [    7/   50] | d_loss: 0.6614 | g_loss: 1.7965\n",
      "Epoch [    7/   50] | d_loss: 1.1045 | g_loss: 1.3615\n",
      "Epoch [    7/   50] | d_loss: 0.5173 | g_loss: 2.0271\n",
      "Epoch [    7/   50] | d_loss: 0.5278 | g_loss: 2.0258\n",
      "Epoch [    7/   50] | d_loss: 0.6318 | g_loss: 1.4845\n",
      "Epoch [    7/   50] | d_loss: 0.6558 | g_loss: 1.9422\n",
      "Epoch [    7/   50] | d_loss: 0.5730 | g_loss: 2.0295\n",
      "Epoch [    7/   50] | d_loss: 0.5817 | g_loss: 1.9449\n",
      "Epoch [    7/   50] | d_loss: 0.6781 | g_loss: 1.9070\n",
      "Epoch [    8/   50] | d_loss: 0.6666 | g_loss: 1.9207\n",
      "Epoch [    8/   50] | d_loss: 0.5611 | g_loss: 2.1999\n",
      "Epoch [    8/   50] | d_loss: 0.6106 | g_loss: 1.7515\n",
      "Epoch [    8/   50] | d_loss: 0.8072 | g_loss: 1.3044\n",
      "Epoch [    8/   50] | d_loss: 0.9279 | g_loss: 1.4434\n",
      "Epoch [    8/   50] | d_loss: 0.6176 | g_loss: 1.9050\n",
      "Epoch [    8/   50] | d_loss: 0.8780 | g_loss: 1.5608\n",
      "Epoch [    8/   50] | d_loss: 0.7126 | g_loss: 1.5857\n",
      "Epoch [    8/   50] | d_loss: 0.7645 | g_loss: 2.1338\n",
      "Epoch [    8/   50] | d_loss: 0.4781 | g_loss: 2.1657\n",
      "Epoch [    8/   50] | d_loss: 0.6929 | g_loss: 1.5506\n",
      "Epoch [    8/   50] | d_loss: 0.4190 | g_loss: 2.1252\n",
      "Epoch [    8/   50] | d_loss: 0.8350 | g_loss: 1.5517\n",
      "Epoch [    8/   50] | d_loss: 0.8933 | g_loss: 1.1924\n",
      "Epoch [    8/   50] | d_loss: 0.4400 | g_loss: 2.2991\n",
      "Epoch [    9/   50] | d_loss: 0.6268 | g_loss: 1.9422\n",
      "Epoch [    9/   50] | d_loss: 1.5687 | g_loss: 4.2053\n",
      "Epoch [    9/   50] | d_loss: 0.7132 | g_loss: 2.0957\n",
      "Epoch [    9/   50] | d_loss: 0.5516 | g_loss: 2.0713\n",
      "Epoch [    9/   50] | d_loss: 0.6449 | g_loss: 1.5939\n",
      "Epoch [    9/   50] | d_loss: 0.4166 | g_loss: 2.2498\n",
      "Epoch [    9/   50] | d_loss: 0.5206 | g_loss: 2.0750\n",
      "Epoch [    9/   50] | d_loss: 0.8283 | g_loss: 1.3108\n",
      "Epoch [    9/   50] | d_loss: 0.5774 | g_loss: 1.6739\n",
      "Epoch [    9/   50] | d_loss: 0.6458 | g_loss: 2.0155\n",
      "Epoch [    9/   50] | d_loss: 0.7071 | g_loss: 2.2916\n",
      "Epoch [    9/   50] | d_loss: 0.5705 | g_loss: 1.9089\n",
      "Epoch [    9/   50] | d_loss: 0.6117 | g_loss: 1.9431\n",
      "Epoch [    9/   50] | d_loss: 0.4838 | g_loss: 2.2470\n",
      "Epoch [    9/   50] | d_loss: 0.7523 | g_loss: 1.4044\n",
      "Epoch [   10/   50] | d_loss: 0.5278 | g_loss: 2.1321\n",
      "Epoch [   10/   50] | d_loss: 0.8588 | g_loss: 1.2582\n",
      "Epoch [   10/   50] | d_loss: 0.5571 | g_loss: 1.7442\n",
      "Epoch [   10/   50] | d_loss: 0.5687 | g_loss: 1.6509\n",
      "Epoch [   10/   50] | d_loss: 0.5923 | g_loss: 1.7028\n",
      "Epoch [   10/   50] | d_loss: 0.4870 | g_loss: 1.9936\n",
      "Epoch [   10/   50] | d_loss: 0.6816 | g_loss: 1.9545\n",
      "Epoch [   10/   50] | d_loss: 0.6154 | g_loss: 1.8213\n",
      "Epoch [   10/   50] | d_loss: 0.5367 | g_loss: 1.6030\n",
      "Epoch [   10/   50] | d_loss: 0.7273 | g_loss: 1.7812\n",
      "Epoch [   10/   50] | d_loss: 0.7489 | g_loss: 1.5060\n",
      "Epoch [   10/   50] | d_loss: 0.3684 | g_loss: 2.7411\n",
      "Epoch [   10/   50] | d_loss: 0.7148 | g_loss: 1.6924\n",
      "Epoch [   10/   50] | d_loss: 0.7751 | g_loss: 1.8159\n",
      "Epoch [   10/   50] | d_loss: 0.7232 | g_loss: 2.0123\n",
      "Epoch [   11/   50] | d_loss: 0.6482 | g_loss: 1.6550\n",
      "Epoch [   11/   50] | d_loss: 0.6237 | g_loss: 1.6526\n",
      "Epoch [   11/   50] | d_loss: 0.5390 | g_loss: 2.0713\n",
      "Epoch [   11/   50] | d_loss: 0.8352 | g_loss: 1.3498\n",
      "Epoch [   11/   50] | d_loss: 0.7165 | g_loss: 1.4439\n",
      "Epoch [   11/   50] | d_loss: 0.6895 | g_loss: 1.6732\n",
      "Epoch [   11/   50] | d_loss: 0.7165 | g_loss: 1.5599\n",
      "Epoch [   11/   50] | d_loss: 0.6030 | g_loss: 1.8388\n",
      "Epoch [   11/   50] | d_loss: 0.7501 | g_loss: 1.6306\n",
      "Epoch [   11/   50] | d_loss: 0.6122 | g_loss: 2.1979\n",
      "Epoch [   11/   50] | d_loss: 0.7010 | g_loss: 2.1551\n",
      "Epoch [   11/   50] | d_loss: 0.6190 | g_loss: 2.0085\n",
      "Epoch [   11/   50] | d_loss: 0.6945 | g_loss: 2.2178\n",
      "Epoch [   11/   50] | d_loss: 0.5724 | g_loss: 1.5316\n",
      "Epoch [   11/   50] | d_loss: 0.6403 | g_loss: 2.1931\n",
      "Epoch [   12/   50] | d_loss: 0.7231 | g_loss: 2.2459\n",
      "Epoch [   12/   50] | d_loss: 0.6098 | g_loss: 1.7905\n",
      "Epoch [   12/   50] | d_loss: 0.3718 | g_loss: 2.4919\n",
      "Epoch [   12/   50] | d_loss: 0.8056 | g_loss: 1.5411\n",
      "Epoch [   12/   50] | d_loss: 0.7332 | g_loss: 2.3176\n",
      "Epoch [   12/   50] | d_loss: 0.4644 | g_loss: 2.1943\n",
      "Epoch [   12/   50] | d_loss: 0.4987 | g_loss: 1.9748\n",
      "Epoch [   12/   50] | d_loss: 0.7810 | g_loss: 1.5414\n",
      "Epoch [   12/   50] | d_loss: 0.4835 | g_loss: 2.2389\n",
      "Epoch [   12/   50] | d_loss: 0.7824 | g_loss: 1.3563\n",
      "Epoch [   12/   50] | d_loss: 0.4821 | g_loss: 1.9979\n",
      "Epoch [   12/   50] | d_loss: 0.6860 | g_loss: 1.2966\n",
      "Epoch [   12/   50] | d_loss: 0.6181 | g_loss: 2.0444\n",
      "Epoch [   12/   50] | d_loss: 0.6917 | g_loss: 1.5569\n",
      "Epoch [   12/   50] | d_loss: 0.7384 | g_loss: 1.3827\n",
      "Epoch [   13/   50] | d_loss: 0.8457 | g_loss: 1.5190\n",
      "Epoch [   13/   50] | d_loss: 0.7933 | g_loss: 1.6410\n",
      "Epoch [   13/   50] | d_loss: 0.3764 | g_loss: 2.0584\n",
      "Epoch [   13/   50] | d_loss: 0.7319 | g_loss: 1.2801\n",
      "Epoch [   13/   50] | d_loss: 0.3226 | g_loss: 2.7986\n",
      "Epoch [   13/   50] | d_loss: 0.7018 | g_loss: 1.6678\n",
      "Epoch [   13/   50] | d_loss: 0.4621 | g_loss: 2.2725\n",
      "Epoch [   13/   50] | d_loss: 0.4057 | g_loss: 2.6215\n",
      "Epoch [   13/   50] | d_loss: 0.5124 | g_loss: 2.1553\n",
      "Epoch [   13/   50] | d_loss: 0.5473 | g_loss: 2.3690\n",
      "Epoch [   13/   50] | d_loss: 0.7672 | g_loss: 2.1360\n",
      "Epoch [   13/   50] | d_loss: 0.3936 | g_loss: 2.0523\n",
      "Epoch [   13/   50] | d_loss: 0.6073 | g_loss: 1.8933\n",
      "Epoch [   13/   50] | d_loss: 0.4669 | g_loss: 2.1377\n",
      "Epoch [   13/   50] | d_loss: 0.6636 | g_loss: 1.8422\n",
      "Epoch [   14/   50] | d_loss: 0.5957 | g_loss: 1.9996\n",
      "Epoch [   14/   50] | d_loss: 0.6823 | g_loss: 1.7707\n",
      "Epoch [   14/   50] | d_loss: 0.3124 | g_loss: 2.4311\n",
      "Epoch [   14/   50] | d_loss: 0.5083 | g_loss: 1.8940\n",
      "Epoch [   14/   50] | d_loss: 0.5760 | g_loss: 2.0036\n",
      "Epoch [   14/   50] | d_loss: 0.5133 | g_loss: 1.9126\n",
      "Epoch [   14/   50] | d_loss: 0.6056 | g_loss: 2.1645\n",
      "Epoch [   14/   50] | d_loss: 0.4979 | g_loss: 2.3429\n",
      "Epoch [   14/   50] | d_loss: 0.5031 | g_loss: 2.1340\n",
      "Epoch [   14/   50] | d_loss: 0.5038 | g_loss: 2.3177\n",
      "Epoch [   14/   50] | d_loss: 0.5979 | g_loss: 2.1478\n",
      "Epoch [   14/   50] | d_loss: 0.8247 | g_loss: 1.6008\n",
      "Epoch [   14/   50] | d_loss: 0.7012 | g_loss: 1.3186\n",
      "Epoch [   14/   50] | d_loss: 0.5989 | g_loss: 1.7012\n",
      "Epoch [   14/   50] | d_loss: 0.9487 | g_loss: 1.2095\n",
      "Epoch [   15/   50] | d_loss: 0.6549 | g_loss: 1.8064\n",
      "Epoch [   15/   50] | d_loss: 0.8191 | g_loss: 1.0080\n",
      "Epoch [   15/   50] | d_loss: 0.7965 | g_loss: 1.6142\n",
      "Epoch [   15/   50] | d_loss: 0.5298 | g_loss: 1.9546\n",
      "Epoch [   15/   50] | d_loss: 0.5612 | g_loss: 2.1541\n",
      "Epoch [   15/   50] | d_loss: 0.6640 | g_loss: 1.9302\n",
      "Epoch [   15/   50] | d_loss: 0.8768 | g_loss: 1.0286\n",
      "Epoch [   15/   50] | d_loss: 0.4897 | g_loss: 2.1498\n",
      "Epoch [   15/   50] | d_loss: 0.6926 | g_loss: 1.4482\n",
      "Epoch [   15/   50] | d_loss: 0.5454 | g_loss: 2.1378\n",
      "Epoch [   15/   50] | d_loss: 0.7718 | g_loss: 1.9824\n",
      "Epoch [   15/   50] | d_loss: 0.4551 | g_loss: 2.1407\n",
      "Epoch [   15/   50] | d_loss: 0.6548 | g_loss: 1.4180\n",
      "Epoch [   15/   50] | d_loss: 0.4693 | g_loss: 2.7807\n",
      "Epoch [   15/   50] | d_loss: 0.5629 | g_loss: 2.2841\n",
      "Epoch [   16/   50] | d_loss: 0.5593 | g_loss: 2.2046\n",
      "Epoch [   16/   50] | d_loss: 0.6882 | g_loss: 1.6232\n",
      "Epoch [   16/   50] | d_loss: 0.6438 | g_loss: 1.8423\n",
      "Epoch [   16/   50] | d_loss: 0.7586 | g_loss: 1.9210\n",
      "Epoch [   16/   50] | d_loss: 0.5082 | g_loss: 2.5718\n",
      "Epoch [   16/   50] | d_loss: 0.7813 | g_loss: 1.8640\n",
      "Epoch [   16/   50] | d_loss: 0.7154 | g_loss: 1.9473\n",
      "Epoch [   16/   50] | d_loss: 0.6251 | g_loss: 2.0605\n",
      "Epoch [   16/   50] | d_loss: 0.7188 | g_loss: 1.9846\n",
      "Epoch [   16/   50] | d_loss: 0.6212 | g_loss: 1.6240\n",
      "Epoch [   16/   50] | d_loss: 0.9118 | g_loss: 1.3890\n",
      "Epoch [   16/   50] | d_loss: 0.6051 | g_loss: 1.9848\n",
      "Epoch [   16/   50] | d_loss: 0.4178 | g_loss: 2.2792\n",
      "Epoch [   16/   50] | d_loss: 0.6398 | g_loss: 1.7249\n",
      "Epoch [   16/   50] | d_loss: 0.6760 | g_loss: 1.5882\n",
      "Epoch [   17/   50] | d_loss: 0.4446 | g_loss: 2.1919\n",
      "Epoch [   17/   50] | d_loss: 0.6664 | g_loss: 1.5570\n",
      "Epoch [   17/   50] | d_loss: 0.6918 | g_loss: 1.7350\n",
      "Epoch [   17/   50] | d_loss: 0.6074 | g_loss: 2.2096\n",
      "Epoch [   17/   50] | d_loss: 0.6290 | g_loss: 1.6740\n",
      "Epoch [   17/   50] | d_loss: 0.5167 | g_loss: 2.0681\n",
      "Epoch [   17/   50] | d_loss: 0.6421 | g_loss: 2.1239\n",
      "Epoch [   17/   50] | d_loss: 0.5221 | g_loss: 2.1436\n",
      "Epoch [   17/   50] | d_loss: 0.6518 | g_loss: 1.9558\n",
      "Epoch [   17/   50] | d_loss: 0.7491 | g_loss: 1.5828\n",
      "Epoch [   17/   50] | d_loss: 0.5537 | g_loss: 2.0725\n",
      "Epoch [   17/   50] | d_loss: 0.7087 | g_loss: 1.4855\n",
      "Epoch [   17/   50] | d_loss: 0.4835 | g_loss: 2.1224\n",
      "Epoch [   17/   50] | d_loss: 0.7812 | g_loss: 1.6413\n",
      "Epoch [   17/   50] | d_loss: 0.4453 | g_loss: 2.6921\n",
      "Epoch [   18/   50] | d_loss: 0.5625 | g_loss: 2.3651\n",
      "Epoch [   18/   50] | d_loss: 0.5860 | g_loss: 1.8725\n",
      "Epoch [   18/   50] | d_loss: 0.6676 | g_loss: 1.5832\n",
      "Epoch [   18/   50] | d_loss: 0.5256 | g_loss: 2.3951\n",
      "Epoch [   18/   50] | d_loss: 0.7536 | g_loss: 1.5118\n",
      "Epoch [   18/   50] | d_loss: 0.5499 | g_loss: 2.2438\n",
      "Epoch [   18/   50] | d_loss: 0.6917 | g_loss: 1.7924\n",
      "Epoch [   18/   50] | d_loss: 0.3999 | g_loss: 2.3054\n",
      "Epoch [   18/   50] | d_loss: 0.7717 | g_loss: 3.8022\n",
      "Epoch [   18/   50] | d_loss: 0.6874 | g_loss: 2.2369\n",
      "Epoch [   18/   50] | d_loss: 0.4343 | g_loss: 2.6308\n",
      "Epoch [   18/   50] | d_loss: 0.6510 | g_loss: 1.5148\n",
      "Epoch [   18/   50] | d_loss: 0.4592 | g_loss: 2.1044\n",
      "Epoch [   18/   50] | d_loss: 0.4816 | g_loss: 2.5237\n",
      "Epoch [   18/   50] | d_loss: 0.5417 | g_loss: 1.6770\n",
      "Epoch [   19/   50] | d_loss: 0.8191 | g_loss: 1.4516\n",
      "Epoch [   19/   50] | d_loss: 0.9514 | g_loss: 1.3579\n",
      "Epoch [   19/   50] | d_loss: 0.5503 | g_loss: 1.9865\n",
      "Epoch [   19/   50] | d_loss: 0.8319 | g_loss: 1.6949\n",
      "Epoch [   19/   50] | d_loss: 0.4937 | g_loss: 2.1476\n",
      "Epoch [   19/   50] | d_loss: 0.3542 | g_loss: 2.7449\n",
      "Epoch [   19/   50] | d_loss: 0.5032 | g_loss: 2.2904\n",
      "Epoch [   19/   50] | d_loss: 0.3841 | g_loss: 2.4110\n",
      "Epoch [   19/   50] | d_loss: 0.4980 | g_loss: 1.8164\n",
      "Epoch [   19/   50] | d_loss: 0.5614 | g_loss: 2.2728\n",
      "Epoch [   19/   50] | d_loss: 0.6897 | g_loss: 1.4185\n",
      "Epoch [   19/   50] | d_loss: 0.7261 | g_loss: 2.4727\n",
      "Epoch [   19/   50] | d_loss: 0.4344 | g_loss: 2.2638\n",
      "Epoch [   19/   50] | d_loss: 0.5563 | g_loss: 2.2901\n",
      "Epoch [   19/   50] | d_loss: 0.5342 | g_loss: 1.8282\n",
      "Epoch [   20/   50] | d_loss: 0.4304 | g_loss: 2.2903\n",
      "Epoch [   20/   50] | d_loss: 0.5212 | g_loss: 2.2259\n",
      "Epoch [   20/   50] | d_loss: 0.9943 | g_loss: 1.3467\n",
      "Epoch [   20/   50] | d_loss: 0.5521 | g_loss: 2.2357\n",
      "Epoch [   20/   50] | d_loss: 0.5623 | g_loss: 1.8388\n",
      "Epoch [   20/   50] | d_loss: 0.4187 | g_loss: 2.7704\n",
      "Epoch [   20/   50] | d_loss: 0.6048 | g_loss: 2.4249\n",
      "Epoch [   20/   50] | d_loss: 0.4950 | g_loss: 2.1486\n",
      "Epoch [   20/   50] | d_loss: 0.5747 | g_loss: 2.1895\n",
      "Epoch [   20/   50] | d_loss: 0.4365 | g_loss: 2.6538\n",
      "Epoch [   20/   50] | d_loss: 0.5210 | g_loss: 2.0647\n",
      "Epoch [   20/   50] | d_loss: 0.4345 | g_loss: 2.8214\n",
      "Epoch [   20/   50] | d_loss: 0.2661 | g_loss: 2.9336\n",
      "Epoch [   20/   50] | d_loss: 0.5929 | g_loss: 1.4343\n",
      "Epoch [   20/   50] | d_loss: 0.6413 | g_loss: 2.0624\n",
      "Epoch [   21/   50] | d_loss: 0.7612 | g_loss: 1.5970\n",
      "Epoch [   21/   50] | d_loss: 0.6949 | g_loss: 1.4166\n",
      "Epoch [   21/   50] | d_loss: 0.5153 | g_loss: 1.9691\n",
      "Epoch [   21/   50] | d_loss: 0.4938 | g_loss: 2.3250\n",
      "Epoch [   21/   50] | d_loss: 0.6439 | g_loss: 2.3462\n",
      "Epoch [   21/   50] | d_loss: 0.3993 | g_loss: 2.6587\n",
      "Epoch [   21/   50] | d_loss: 0.5606 | g_loss: 2.1071\n",
      "Epoch [   21/   50] | d_loss: 0.4205 | g_loss: 2.5002\n",
      "Epoch [   21/   50] | d_loss: 0.9431 | g_loss: 1.5390\n",
      "Epoch [   21/   50] | d_loss: 0.6819 | g_loss: 2.5582\n",
      "Epoch [   21/   50] | d_loss: 0.4452 | g_loss: 2.2520\n",
      "Epoch [   21/   50] | d_loss: 0.8424 | g_loss: 1.4394\n",
      "Epoch [   21/   50] | d_loss: 0.5327 | g_loss: 1.9290\n",
      "Epoch [   21/   50] | d_loss: 0.4151 | g_loss: 2.1107\n",
      "Epoch [   21/   50] | d_loss: 0.4093 | g_loss: 2.8897\n",
      "Epoch [   22/   50] | d_loss: 0.5876 | g_loss: 1.4687\n",
      "Epoch [   22/   50] | d_loss: 0.5829 | g_loss: 1.7641\n",
      "Epoch [   22/   50] | d_loss: 0.4774 | g_loss: 2.6314\n",
      "Epoch [   22/   50] | d_loss: 0.7286 | g_loss: 1.6072\n",
      "Epoch [   22/   50] | d_loss: 0.4481 | g_loss: 2.1088\n",
      "Epoch [   22/   50] | d_loss: 0.3054 | g_loss: 2.7323\n",
      "Epoch [   22/   50] | d_loss: 0.4938 | g_loss: 2.3013\n",
      "Epoch [   22/   50] | d_loss: 0.3861 | g_loss: 2.8622\n",
      "Epoch [   22/   50] | d_loss: 0.4818 | g_loss: 2.1777\n",
      "Epoch [   22/   50] | d_loss: 0.6429 | g_loss: 1.7266\n",
      "Epoch [   22/   50] | d_loss: 0.7235 | g_loss: 1.7511\n",
      "Epoch [   22/   50] | d_loss: 0.4156 | g_loss: 2.3892\n",
      "Epoch [   22/   50] | d_loss: 0.4483 | g_loss: 2.2602\n",
      "Epoch [   22/   50] | d_loss: 0.7266 | g_loss: 1.6651\n",
      "Epoch [   22/   50] | d_loss: 0.6124 | g_loss: 2.0096\n",
      "Epoch [   23/   50] | d_loss: 0.4419 | g_loss: 2.1885\n",
      "Epoch [   23/   50] | d_loss: 0.5947 | g_loss: 1.8434\n",
      "Epoch [   23/   50] | d_loss: 0.5083 | g_loss: 2.2968\n",
      "Epoch [   23/   50] | d_loss: 0.3916 | g_loss: 2.5573\n",
      "Epoch [   23/   50] | d_loss: 0.5421 | g_loss: 2.2114\n",
      "Epoch [   23/   50] | d_loss: 0.4820 | g_loss: 2.1565\n",
      "Epoch [   23/   50] | d_loss: 0.5685 | g_loss: 2.1478\n",
      "Epoch [   23/   50] | d_loss: 0.7619 | g_loss: 1.6931\n",
      "Epoch [   23/   50] | d_loss: 0.8899 | g_loss: 2.1670\n",
      "Epoch [   23/   50] | d_loss: 0.2446 | g_loss: 2.8709\n",
      "Epoch [   23/   50] | d_loss: 0.3420 | g_loss: 2.7206\n",
      "Epoch [   23/   50] | d_loss: 0.7026 | g_loss: 2.6236\n",
      "Epoch [   23/   50] | d_loss: 0.7604 | g_loss: 2.1200\n",
      "Epoch [   23/   50] | d_loss: 0.6025 | g_loss: 1.8297\n",
      "Epoch [   23/   50] | d_loss: 0.6312 | g_loss: 2.0780\n",
      "Epoch [   24/   50] | d_loss: 0.4300 | g_loss: 2.2820\n",
      "Epoch [   24/   50] | d_loss: 0.5253 | g_loss: 2.4542\n",
      "Epoch [   24/   50] | d_loss: 0.5566 | g_loss: 2.0300\n",
      "Epoch [   24/   50] | d_loss: 0.4598 | g_loss: 2.1804\n",
      "Epoch [   24/   50] | d_loss: 0.6368 | g_loss: 1.4196\n",
      "Epoch [   24/   50] | d_loss: 0.5386 | g_loss: 1.7704\n",
      "Epoch [   24/   50] | d_loss: 0.5036 | g_loss: 2.1708\n",
      "Epoch [   24/   50] | d_loss: 0.6891 | g_loss: 1.7152\n",
      "Epoch [   24/   50] | d_loss: 0.6059 | g_loss: 2.8930\n",
      "Epoch [   24/   50] | d_loss: 0.4408 | g_loss: 1.8294\n",
      "Epoch [   24/   50] | d_loss: 0.6425 | g_loss: 2.2226\n",
      "Epoch [   24/   50] | d_loss: 0.5936 | g_loss: 2.1148\n",
      "Epoch [   24/   50] | d_loss: 0.4262 | g_loss: 2.6041\n",
      "Epoch [   24/   50] | d_loss: 0.4608 | g_loss: 2.4665\n",
      "Epoch [   24/   50] | d_loss: 0.4778 | g_loss: 2.2275\n",
      "Epoch [   25/   50] | d_loss: 0.4624 | g_loss: 2.6438\n",
      "Epoch [   25/   50] | d_loss: 0.4956 | g_loss: 2.2444\n",
      "Epoch [   25/   50] | d_loss: 0.3507 | g_loss: 2.2861\n",
      "Epoch [   25/   50] | d_loss: 0.3885 | g_loss: 2.6710\n",
      "Epoch [   25/   50] | d_loss: 0.3166 | g_loss: 3.0563\n",
      "Epoch [   25/   50] | d_loss: 0.3379 | g_loss: 3.0554\n",
      "Epoch [   25/   50] | d_loss: 0.5320 | g_loss: 2.0343\n",
      "Epoch [   25/   50] | d_loss: 0.3695 | g_loss: 2.9653\n",
      "Epoch [   25/   50] | d_loss: 0.5141 | g_loss: 1.9994\n",
      "Epoch [   25/   50] | d_loss: 0.7980 | g_loss: 1.5924\n",
      "Epoch [   25/   50] | d_loss: 0.5052 | g_loss: 1.5624\n",
      "Epoch [   25/   50] | d_loss: 0.5120 | g_loss: 1.9835\n",
      "Epoch [   25/   50] | d_loss: 0.6101 | g_loss: 2.3056\n",
      "Epoch [   25/   50] | d_loss: 0.3120 | g_loss: 2.7434\n",
      "Epoch [   25/   50] | d_loss: 0.3734 | g_loss: 2.2698\n",
      "Epoch [   26/   50] | d_loss: 0.3493 | g_loss: 2.9881\n",
      "Epoch [   26/   50] | d_loss: 0.3205 | g_loss: 2.3567\n",
      "Epoch [   26/   50] | d_loss: 0.6022 | g_loss: 1.8450\n",
      "Epoch [   26/   50] | d_loss: 0.4690 | g_loss: 2.0012\n",
      "Epoch [   26/   50] | d_loss: 0.4621 | g_loss: 2.2816\n",
      "Epoch [   26/   50] | d_loss: 0.3384 | g_loss: 2.3921\n",
      "Epoch [   26/   50] | d_loss: 0.4382 | g_loss: 2.6136\n",
      "Epoch [   26/   50] | d_loss: 0.3643 | g_loss: 2.7494\n",
      "Epoch [   26/   50] | d_loss: 0.3757 | g_loss: 2.6380\n",
      "Epoch [   26/   50] | d_loss: 0.4915 | g_loss: 2.5751\n",
      "Epoch [   26/   50] | d_loss: 0.4836 | g_loss: 1.9773\n",
      "Epoch [   26/   50] | d_loss: 0.4830 | g_loss: 1.9657\n",
      "Epoch [   26/   50] | d_loss: 0.3264 | g_loss: 2.9800\n",
      "Epoch [   26/   50] | d_loss: 0.4884 | g_loss: 2.0095\n",
      "Epoch [   26/   50] | d_loss: 0.5346 | g_loss: 1.9646\n",
      "Epoch [   27/   50] | d_loss: 0.4359 | g_loss: 2.6487\n",
      "Epoch [   27/   50] | d_loss: 0.6237 | g_loss: 2.0269\n",
      "Epoch [   27/   50] | d_loss: 0.5123 | g_loss: 2.4687\n",
      "Epoch [   27/   50] | d_loss: 0.7711 | g_loss: 1.9546\n",
      "Epoch [   27/   50] | d_loss: 0.4950 | g_loss: 2.5071\n",
      "Epoch [   27/   50] | d_loss: 0.1539 | g_loss: 3.5861\n",
      "Epoch [   27/   50] | d_loss: 0.5716 | g_loss: 2.4573\n",
      "Epoch [   27/   50] | d_loss: 0.5521 | g_loss: 2.1258\n",
      "Epoch [   27/   50] | d_loss: 0.4262 | g_loss: 2.5107\n",
      "Epoch [   27/   50] | d_loss: 0.4481 | g_loss: 2.2979\n",
      "Epoch [   27/   50] | d_loss: 0.3584 | g_loss: 2.2276\n",
      "Epoch [   27/   50] | d_loss: 0.7711 | g_loss: 1.6985\n",
      "Epoch [   27/   50] | d_loss: 0.4789 | g_loss: 2.3722\n",
      "Epoch [   27/   50] | d_loss: 0.6797 | g_loss: 1.5925\n",
      "Epoch [   27/   50] | d_loss: 0.5901 | g_loss: 2.0580\n",
      "Epoch [   28/   50] | d_loss: 0.2785 | g_loss: 3.3755\n",
      "Epoch [   28/   50] | d_loss: 0.4245 | g_loss: 2.3666\n",
      "Epoch [   28/   50] | d_loss: 0.4844 | g_loss: 2.1677\n",
      "Epoch [   28/   50] | d_loss: 0.3163 | g_loss: 3.0432\n",
      "Epoch [   28/   50] | d_loss: 0.5762 | g_loss: 2.4571\n",
      "Epoch [   28/   50] | d_loss: 0.5090 | g_loss: 2.6653\n",
      "Epoch [   28/   50] | d_loss: 0.5054 | g_loss: 2.4542\n",
      "Epoch [   28/   50] | d_loss: 0.3798 | g_loss: 2.3366\n",
      "Epoch [   28/   50] | d_loss: 0.5738 | g_loss: 2.4555\n",
      "Epoch [   28/   50] | d_loss: 0.4601 | g_loss: 2.4963\n",
      "Epoch [   28/   50] | d_loss: 0.2629 | g_loss: 3.0663\n",
      "Epoch [   28/   50] | d_loss: 0.3637 | g_loss: 3.1540\n",
      "Epoch [   28/   50] | d_loss: 0.3505 | g_loss: 2.3407\n",
      "Epoch [   28/   50] | d_loss: 0.5389 | g_loss: 2.3978\n",
      "Epoch [   28/   50] | d_loss: 0.7992 | g_loss: 1.7943\n",
      "Epoch [   29/   50] | d_loss: 0.5312 | g_loss: 2.6939\n",
      "Epoch [   29/   50] | d_loss: 0.3628 | g_loss: 2.7725\n",
      "Epoch [   29/   50] | d_loss: 0.1990 | g_loss: 3.0719\n",
      "Epoch [   29/   50] | d_loss: 0.8427 | g_loss: 0.6242\n",
      "Epoch [   29/   50] | d_loss: 0.4032 | g_loss: 2.5017\n",
      "Epoch [   29/   50] | d_loss: 0.6628 | g_loss: 1.5751\n",
      "Epoch [   29/   50] | d_loss: 0.3489 | g_loss: 1.9065\n",
      "Epoch [   29/   50] | d_loss: 0.3037 | g_loss: 2.7739\n",
      "Epoch [   29/   50] | d_loss: 0.5507 | g_loss: 2.9755\n",
      "Epoch [   29/   50] | d_loss: 0.6182 | g_loss: 1.8428\n",
      "Epoch [   29/   50] | d_loss: 0.3130 | g_loss: 2.7785\n",
      "Epoch [   29/   50] | d_loss: 0.3838 | g_loss: 2.6732\n",
      "Epoch [   29/   50] | d_loss: 0.4195 | g_loss: 2.6104\n",
      "Epoch [   29/   50] | d_loss: 0.2458 | g_loss: 3.1796\n",
      "Epoch [   29/   50] | d_loss: 0.6932 | g_loss: 1.6617\n",
      "Epoch [   30/   50] | d_loss: 0.4975 | g_loss: 1.9367\n",
      "Epoch [   30/   50] | d_loss: 0.4751 | g_loss: 2.3747\n",
      "Epoch [   30/   50] | d_loss: 0.3937 | g_loss: 2.8935\n",
      "Epoch [   30/   50] | d_loss: 0.6209 | g_loss: 2.1652\n",
      "Epoch [   30/   50] | d_loss: 0.4230 | g_loss: 2.5360\n",
      "Epoch [   30/   50] | d_loss: 0.4893 | g_loss: 2.7799\n",
      "Epoch [   30/   50] | d_loss: 0.6275 | g_loss: 2.4801\n",
      "Epoch [   30/   50] | d_loss: 0.4233 | g_loss: 2.3989\n",
      "Epoch [   30/   50] | d_loss: 0.2174 | g_loss: 3.3553\n",
      "Epoch [   30/   50] | d_loss: 0.3284 | g_loss: 2.9298\n",
      "Epoch [   30/   50] | d_loss: 0.3596 | g_loss: 2.7258\n",
      "Epoch [   30/   50] | d_loss: 0.2860 | g_loss: 2.4841\n",
      "Epoch [   30/   50] | d_loss: 0.3549 | g_loss: 2.8412\n",
      "Epoch [   30/   50] | d_loss: 0.3704 | g_loss: 2.6319\n",
      "Epoch [   30/   50] | d_loss: 0.3992 | g_loss: 2.3092\n",
      "Epoch [   31/   50] | d_loss: 0.4228 | g_loss: 2.2265\n",
      "Epoch [   31/   50] | d_loss: 0.8296 | g_loss: 1.9388\n",
      "Epoch [   31/   50] | d_loss: 0.3476 | g_loss: 3.2225\n",
      "Epoch [   31/   50] | d_loss: 0.6233 | g_loss: 2.4898\n",
      "Epoch [   31/   50] | d_loss: 0.3849 | g_loss: 2.9294\n",
      "Epoch [   31/   50] | d_loss: 0.4580 | g_loss: 2.5185\n",
      "Epoch [   31/   50] | d_loss: 0.3756 | g_loss: 3.1145\n",
      "Epoch [   31/   50] | d_loss: 0.2552 | g_loss: 2.7062\n",
      "Epoch [   31/   50] | d_loss: 0.5347 | g_loss: 2.2499\n",
      "Epoch [   31/   50] | d_loss: 0.4973 | g_loss: 2.5617\n",
      "Epoch [   31/   50] | d_loss: 0.5399 | g_loss: 2.0372\n",
      "Epoch [   31/   50] | d_loss: 0.3153 | g_loss: 2.7304\n",
      "Epoch [   31/   50] | d_loss: 0.2102 | g_loss: 2.9695\n",
      "Epoch [   31/   50] | d_loss: 0.4326 | g_loss: 2.3842\n",
      "Epoch [   31/   50] | d_loss: 0.4109 | g_loss: 2.1178\n",
      "Epoch [   32/   50] | d_loss: 0.2994 | g_loss: 3.1595\n",
      "Epoch [   32/   50] | d_loss: 0.4034 | g_loss: 2.1193\n",
      "Epoch [   32/   50] | d_loss: 0.3221 | g_loss: 2.8820\n",
      "Epoch [   32/   50] | d_loss: 0.3227 | g_loss: 2.3799\n",
      "Epoch [   32/   50] | d_loss: 0.4504 | g_loss: 1.8131\n",
      "Epoch [   32/   50] | d_loss: 0.6664 | g_loss: 2.2990\n",
      "Epoch [   32/   50] | d_loss: 0.3865 | g_loss: 2.4398\n",
      "Epoch [   32/   50] | d_loss: 0.4295 | g_loss: 2.8329\n",
      "Epoch [   32/   50] | d_loss: 0.5961 | g_loss: 2.5585\n",
      "Epoch [   32/   50] | d_loss: 0.3797 | g_loss: 2.6848\n",
      "Epoch [   32/   50] | d_loss: 0.6503 | g_loss: 2.1432\n",
      "Epoch [   32/   50] | d_loss: 0.4097 | g_loss: 2.1928\n",
      "Epoch [   32/   50] | d_loss: 0.6576 | g_loss: 2.2667\n",
      "Epoch [   32/   50] | d_loss: 0.1333 | g_loss: 3.8359\n",
      "Epoch [   32/   50] | d_loss: 0.2302 | g_loss: 3.1235\n",
      "Epoch [   33/   50] | d_loss: 0.2357 | g_loss: 3.3588\n",
      "Epoch [   33/   50] | d_loss: 0.5324 | g_loss: 2.0906\n",
      "Epoch [   33/   50] | d_loss: 0.4363 | g_loss: 2.3507\n",
      "Epoch [   33/   50] | d_loss: 0.2967 | g_loss: 2.3221\n",
      "Epoch [   33/   50] | d_loss: 0.3057 | g_loss: 2.7430\n",
      "Epoch [   33/   50] | d_loss: 0.4829 | g_loss: 2.1889\n",
      "Epoch [   33/   50] | d_loss: 0.5634 | g_loss: 1.9367\n",
      "Epoch [   33/   50] | d_loss: 0.4643 | g_loss: 1.9103\n",
      "Epoch [   33/   50] | d_loss: 0.5246 | g_loss: 2.2255\n",
      "Epoch [   33/   50] | d_loss: 0.2957 | g_loss: 3.0541\n",
      "Epoch [   33/   50] | d_loss: 0.6239 | g_loss: 1.3052\n",
      "Epoch [   33/   50] | d_loss: 0.2516 | g_loss: 3.2838\n",
      "Epoch [   33/   50] | d_loss: 0.3338 | g_loss: 2.4358\n",
      "Epoch [   33/   50] | d_loss: 0.3087 | g_loss: 2.9533\n",
      "Epoch [   33/   50] | d_loss: 0.4138 | g_loss: 2.8559\n",
      "Epoch [   34/   50] | d_loss: 0.5453 | g_loss: 2.1087\n",
      "Epoch [   34/   50] | d_loss: 0.4463 | g_loss: 2.0611\n",
      "Epoch [   34/   50] | d_loss: 0.6176 | g_loss: 2.4543\n",
      "Epoch [   34/   50] | d_loss: 0.4013 | g_loss: 2.1535\n",
      "Epoch [   34/   50] | d_loss: 0.3896 | g_loss: 1.9318\n",
      "Epoch [   34/   50] | d_loss: 0.1488 | g_loss: 4.0103\n",
      "Epoch [   34/   50] | d_loss: 0.4235 | g_loss: 2.9604\n",
      "Epoch [   34/   50] | d_loss: 0.1240 | g_loss: 3.7789\n",
      "Epoch [   34/   50] | d_loss: 0.4338 | g_loss: 2.5207\n",
      "Epoch [   34/   50] | d_loss: 0.3715 | g_loss: 2.3073\n",
      "Epoch [   34/   50] | d_loss: 0.4043 | g_loss: 2.8245\n",
      "Epoch [   34/   50] | d_loss: 0.6205 | g_loss: 2.4194\n",
      "Epoch [   34/   50] | d_loss: 0.3792 | g_loss: 2.4478\n",
      "Epoch [   34/   50] | d_loss: 0.7156 | g_loss: 1.4532\n",
      "Epoch [   34/   50] | d_loss: 0.3763 | g_loss: 2.2706\n",
      "Epoch [   35/   50] | d_loss: 0.3470 | g_loss: 2.8594\n",
      "Epoch [   35/   50] | d_loss: 0.3175 | g_loss: 2.6083\n",
      "Epoch [   35/   50] | d_loss: 0.3253 | g_loss: 2.9789\n",
      "Epoch [   35/   50] | d_loss: 0.7294 | g_loss: 2.6065\n",
      "Epoch [   35/   50] | d_loss: 0.3558 | g_loss: 2.5595\n",
      "Epoch [   35/   50] | d_loss: 0.4142 | g_loss: 2.8008\n",
      "Epoch [   35/   50] | d_loss: 0.3894 | g_loss: 3.3842\n",
      "Epoch [   35/   50] | d_loss: 0.5915 | g_loss: 2.5000\n",
      "Epoch [   35/   50] | d_loss: 0.3154 | g_loss: 2.6673\n",
      "Epoch [   35/   50] | d_loss: 0.4590 | g_loss: 2.4201\n",
      "Epoch [   35/   50] | d_loss: 0.4976 | g_loss: 2.2914\n",
      "Epoch [   35/   50] | d_loss: 0.2649 | g_loss: 2.3740\n",
      "Epoch [   35/   50] | d_loss: 0.5487 | g_loss: 2.2318\n",
      "Epoch [   35/   50] | d_loss: 0.5651 | g_loss: 2.2099\n",
      "Epoch [   35/   50] | d_loss: 0.4288 | g_loss: 1.6067\n",
      "Epoch [   36/   50] | d_loss: 0.8316 | g_loss: 1.4603\n",
      "Epoch [   36/   50] | d_loss: 0.5268 | g_loss: 2.6831\n",
      "Epoch [   36/   50] | d_loss: 0.4534 | g_loss: 2.3240\n",
      "Epoch [   36/   50] | d_loss: 0.4482 | g_loss: 2.3052\n",
      "Epoch [   36/   50] | d_loss: 0.5428 | g_loss: 2.4443\n",
      "Epoch [   36/   50] | d_loss: 0.3844 | g_loss: 2.1911\n",
      "Epoch [   36/   50] | d_loss: 0.4497 | g_loss: 3.2603\n",
      "Epoch [   36/   50] | d_loss: 0.4435 | g_loss: 2.2265\n",
      "Epoch [   36/   50] | d_loss: 0.3377 | g_loss: 2.9790\n",
      "Epoch [   36/   50] | d_loss: 0.4236 | g_loss: 1.7938\n",
      "Epoch [   36/   50] | d_loss: 0.5203 | g_loss: 2.0985\n",
      "Epoch [   36/   50] | d_loss: 0.8292 | g_loss: 1.7358\n",
      "Epoch [   36/   50] | d_loss: 0.3797 | g_loss: 2.0795\n",
      "Epoch [   36/   50] | d_loss: 0.3735 | g_loss: 2.6487\n",
      "Epoch [   36/   50] | d_loss: 0.2704 | g_loss: 2.9625\n",
      "Epoch [   37/   50] | d_loss: 0.4704 | g_loss: 2.3573\n",
      "Epoch [   37/   50] | d_loss: 0.3776 | g_loss: 2.4788\n",
      "Epoch [   37/   50] | d_loss: 0.3494 | g_loss: 3.4086\n",
      "Epoch [   37/   50] | d_loss: 0.5506 | g_loss: 2.3446\n",
      "Epoch [   37/   50] | d_loss: 0.2569 | g_loss: 3.1205\n",
      "Epoch [   37/   50] | d_loss: 0.2119 | g_loss: 2.8157\n",
      "Epoch [   37/   50] | d_loss: 0.3141 | g_loss: 2.8373\n",
      "Epoch [   37/   50] | d_loss: 0.3735 | g_loss: 1.9895\n",
      "Epoch [   37/   50] | d_loss: 0.3558 | g_loss: 2.6624\n",
      "Epoch [   37/   50] | d_loss: 0.5647 | g_loss: 2.3248\n",
      "Epoch [   37/   50] | d_loss: 0.4821 | g_loss: 1.8788\n",
      "Epoch [   37/   50] | d_loss: 0.3394 | g_loss: 2.6926\n",
      "Epoch [   37/   50] | d_loss: 0.2233 | g_loss: 3.2973\n",
      "Epoch [   37/   50] | d_loss: 0.4967 | g_loss: 3.0402\n",
      "Epoch [   37/   50] | d_loss: 0.3625 | g_loss: 2.5093\n",
      "Epoch [   38/   50] | d_loss: 0.3750 | g_loss: 3.1011\n",
      "Epoch [   38/   50] | d_loss: 0.4514 | g_loss: 3.4746\n",
      "Epoch [   38/   50] | d_loss: 0.3884 | g_loss: 2.7351\n",
      "Epoch [   38/   50] | d_loss: 0.2530 | g_loss: 3.2073\n",
      "Epoch [   38/   50] | d_loss: 0.7283 | g_loss: 2.8928\n",
      "Epoch [   38/   50] | d_loss: 0.2962 | g_loss: 3.9030\n",
      "Epoch [   38/   50] | d_loss: 0.2423 | g_loss: 3.1656\n",
      "Epoch [   38/   50] | d_loss: 0.2562 | g_loss: 2.7398\n",
      "Epoch [   38/   50] | d_loss: 0.5117 | g_loss: 2.0219\n",
      "Epoch [   38/   50] | d_loss: 0.3557 | g_loss: 2.8902\n",
      "Epoch [   38/   50] | d_loss: 0.3682 | g_loss: 2.7204\n",
      "Epoch [   38/   50] | d_loss: 0.5473 | g_loss: 2.1360\n",
      "Epoch [   38/   50] | d_loss: 0.5511 | g_loss: 2.0369\n",
      "Epoch [   38/   50] | d_loss: 0.3545 | g_loss: 2.7774\n",
      "Epoch [   38/   50] | d_loss: 0.6210 | g_loss: 2.0678\n",
      "Epoch [   39/   50] | d_loss: 0.5683 | g_loss: 2.3419\n",
      "Epoch [   39/   50] | d_loss: 0.4707 | g_loss: 2.9103\n",
      "Epoch [   39/   50] | d_loss: 0.2806 | g_loss: 2.6592\n",
      "Epoch [   39/   50] | d_loss: 0.3049 | g_loss: 3.0650\n",
      "Epoch [   39/   50] | d_loss: 0.7483 | g_loss: 1.7544\n",
      "Epoch [   39/   50] | d_loss: 0.1905 | g_loss: 2.9870\n",
      "Epoch [   39/   50] | d_loss: 0.3564 | g_loss: 2.4548\n",
      "Epoch [   39/   50] | d_loss: 0.3152 | g_loss: 1.9492\n",
      "Epoch [   39/   50] | d_loss: 0.3041 | g_loss: 2.8411\n",
      "Epoch [   39/   50] | d_loss: 0.4310 | g_loss: 2.6631\n",
      "Epoch [   39/   50] | d_loss: 0.4570 | g_loss: 2.5650\n",
      "Epoch [   39/   50] | d_loss: 0.4456 | g_loss: 2.3390\n",
      "Epoch [   39/   50] | d_loss: 0.3336 | g_loss: 2.8113\n",
      "Epoch [   39/   50] | d_loss: 0.4426 | g_loss: 2.5907\n",
      "Epoch [   39/   50] | d_loss: 0.9396 | g_loss: 1.5002\n",
      "Epoch [   40/   50] | d_loss: 0.2924 | g_loss: 3.4018\n",
      "Epoch [   40/   50] | d_loss: 0.8332 | g_loss: 2.3493\n",
      "Epoch [   40/   50] | d_loss: 0.2537 | g_loss: 2.9358\n",
      "Epoch [   40/   50] | d_loss: 0.3864 | g_loss: 2.8063\n",
      "Epoch [   40/   50] | d_loss: 0.2481 | g_loss: 3.2653\n",
      "Epoch [   40/   50] | d_loss: 0.3428 | g_loss: 3.0067\n",
      "Epoch [   40/   50] | d_loss: 0.3202 | g_loss: 2.2669\n",
      "Epoch [   40/   50] | d_loss: 0.3727 | g_loss: 2.6352\n",
      "Epoch [   40/   50] | d_loss: 0.2680 | g_loss: 2.9283\n",
      "Epoch [   40/   50] | d_loss: 0.4558 | g_loss: 2.4142\n",
      "Epoch [   40/   50] | d_loss: 0.5406 | g_loss: 3.1087\n",
      "Epoch [   40/   50] | d_loss: 0.3344 | g_loss: 2.3869\n",
      "Epoch [   40/   50] | d_loss: 1.7230 | g_loss: 0.1330\n",
      "Epoch [   40/   50] | d_loss: 0.3553 | g_loss: 3.5443\n",
      "Epoch [   40/   50] | d_loss: 0.7208 | g_loss: 2.0839\n",
      "Epoch [   41/   50] | d_loss: 0.9602 | g_loss: 2.5770\n",
      "Epoch [   41/   50] | d_loss: 0.4566 | g_loss: 2.5949\n",
      "Epoch [   41/   50] | d_loss: 0.5411 | g_loss: 1.6051\n",
      "Epoch [   41/   50] | d_loss: 0.2336 | g_loss: 2.6707\n",
      "Epoch [   41/   50] | d_loss: 0.4147 | g_loss: 3.1905\n",
      "Epoch [   41/   50] | d_loss: 0.5284 | g_loss: 1.8488\n",
      "Epoch [   41/   50] | d_loss: 0.3576 | g_loss: 2.2953\n",
      "Epoch [   41/   50] | d_loss: 0.5451 | g_loss: 2.0238\n",
      "Epoch [   41/   50] | d_loss: 0.8733 | g_loss: 2.0166\n",
      "Epoch [   41/   50] | d_loss: 0.3556 | g_loss: 2.7522\n",
      "Epoch [   41/   50] | d_loss: 0.3936 | g_loss: 3.4826\n",
      "Epoch [   41/   50] | d_loss: 0.2359 | g_loss: 3.7197\n",
      "Epoch [   41/   50] | d_loss: 0.4252 | g_loss: 2.8292\n",
      "Epoch [   41/   50] | d_loss: 0.2775 | g_loss: 2.5399\n",
      "Epoch [   41/   50] | d_loss: 0.5980 | g_loss: 2.4013\n",
      "Epoch [   42/   50] | d_loss: 0.4438 | g_loss: 2.6424\n",
      "Epoch [   42/   50] | d_loss: 0.3151 | g_loss: 2.9416\n",
      "Epoch [   42/   50] | d_loss: 0.4618 | g_loss: 2.5590\n",
      "Epoch [   42/   50] | d_loss: 0.3371 | g_loss: 2.2425\n",
      "Epoch [   42/   50] | d_loss: 0.4445 | g_loss: 2.3846\n",
      "Epoch [   42/   50] | d_loss: 0.3838 | g_loss: 2.5799\n",
      "Epoch [   42/   50] | d_loss: 0.3970 | g_loss: 2.5842\n",
      "Epoch [   42/   50] | d_loss: 0.4348 | g_loss: 2.4662\n",
      "Epoch [   42/   50] | d_loss: 0.2005 | g_loss: 3.5270\n",
      "Epoch [   42/   50] | d_loss: 0.4974 | g_loss: 2.6912\n",
      "Epoch [   42/   50] | d_loss: 0.3093 | g_loss: 2.9159\n",
      "Epoch [   42/   50] | d_loss: 0.2217 | g_loss: 3.0380\n",
      "Epoch [   42/   50] | d_loss: 0.4205 | g_loss: 2.7401\n",
      "Epoch [   42/   50] | d_loss: 0.3858 | g_loss: 2.4716\n",
      "Epoch [   42/   50] | d_loss: 0.1923 | g_loss: 3.6252\n",
      "Epoch [   43/   50] | d_loss: 0.4130 | g_loss: 3.3567\n",
      "Epoch [   43/   50] | d_loss: 0.6501 | g_loss: 3.7515\n",
      "Epoch [   43/   50] | d_loss: 0.3701 | g_loss: 3.0210\n",
      "Epoch [   43/   50] | d_loss: 0.4342 | g_loss: 2.4276\n",
      "Epoch [   43/   50] | d_loss: 0.1957 | g_loss: 3.0520\n",
      "Epoch [   43/   50] | d_loss: 0.1503 | g_loss: 3.8266\n",
      "Epoch [   43/   50] | d_loss: 0.3477 | g_loss: 2.1921\n",
      "Epoch [   43/   50] | d_loss: 0.2447 | g_loss: 3.0065\n",
      "Epoch [   43/   50] | d_loss: 0.5320 | g_loss: 2.7989\n",
      "Epoch [   43/   50] | d_loss: 0.2863 | g_loss: 2.6266\n",
      "Epoch [   43/   50] | d_loss: 0.2364 | g_loss: 3.3549\n",
      "Epoch [   43/   50] | d_loss: 0.2956 | g_loss: 2.9234\n",
      "Epoch [   43/   50] | d_loss: 0.3334 | g_loss: 2.0097\n",
      "Epoch [   43/   50] | d_loss: 0.2462 | g_loss: 2.5370\n",
      "Epoch [   43/   50] | d_loss: 0.3985 | g_loss: 2.7729\n",
      "Epoch [   44/   50] | d_loss: 0.3327 | g_loss: 2.8690\n",
      "Epoch [   44/   50] | d_loss: 0.3071 | g_loss: 2.7025\n",
      "Epoch [   44/   50] | d_loss: 0.4404 | g_loss: 2.5356\n",
      "Epoch [   44/   50] | d_loss: 0.3372 | g_loss: 2.2686\n",
      "Epoch [   44/   50] | d_loss: 0.1964 | g_loss: 3.3019\n",
      "Epoch [   44/   50] | d_loss: 0.3007 | g_loss: 2.9036\n",
      "Epoch [   44/   50] | d_loss: 1.7530 | g_loss: 0.9887\n",
      "Epoch [   44/   50] | d_loss: 0.3635 | g_loss: 2.9914\n",
      "Epoch [   44/   50] | d_loss: 0.5500 | g_loss: 1.8256\n",
      "Epoch [   44/   50] | d_loss: 0.2418 | g_loss: 3.0070\n",
      "Epoch [   44/   50] | d_loss: 0.3319 | g_loss: 2.5173\n",
      "Epoch [   44/   50] | d_loss: 0.5916 | g_loss: 2.2063\n",
      "Epoch [   44/   50] | d_loss: 0.2765 | g_loss: 2.7523\n",
      "Epoch [   44/   50] | d_loss: 0.2462 | g_loss: 2.6281\n",
      "Epoch [   44/   50] | d_loss: 0.3792 | g_loss: 3.2355\n",
      "Epoch [   45/   50] | d_loss: 0.3143 | g_loss: 2.5889\n",
      "Epoch [   45/   50] | d_loss: 0.3556 | g_loss: 2.3723\n",
      "Epoch [   45/   50] | d_loss: 0.2067 | g_loss: 3.3836\n",
      "Epoch [   45/   50] | d_loss: 0.3577 | g_loss: 2.5426\n",
      "Epoch [   45/   50] | d_loss: 0.3662 | g_loss: 3.3305\n",
      "Epoch [   45/   50] | d_loss: 0.1755 | g_loss: 3.2350\n",
      "Epoch [   45/   50] | d_loss: 0.3111 | g_loss: 3.0991\n",
      "Epoch [   45/   50] | d_loss: 0.3592 | g_loss: 3.3566\n",
      "Epoch [   45/   50] | d_loss: 0.3823 | g_loss: 2.6105\n",
      "Epoch [   45/   50] | d_loss: 0.3019 | g_loss: 2.5698\n",
      "Epoch [   45/   50] | d_loss: 0.2306 | g_loss: 3.5692\n",
      "Epoch [   45/   50] | d_loss: 0.2358 | g_loss: 3.4753\n",
      "Epoch [   45/   50] | d_loss: 0.2963 | g_loss: 2.6427\n",
      "Epoch [   45/   50] | d_loss: 0.2935 | g_loss: 2.7439\n",
      "Epoch [   45/   50] | d_loss: 0.3306 | g_loss: 2.4004\n",
      "Epoch [   46/   50] | d_loss: 0.2320 | g_loss: 2.9147\n",
      "Epoch [   46/   50] | d_loss: 0.2987 | g_loss: 3.5973\n",
      "Epoch [   46/   50] | d_loss: 0.2826 | g_loss: 3.0157\n",
      "Epoch [   46/   50] | d_loss: 0.2964 | g_loss: 3.0303\n",
      "Epoch [   46/   50] | d_loss: 0.4490 | g_loss: 1.8791\n",
      "Epoch [   46/   50] | d_loss: 0.7004 | g_loss: 1.8985\n",
      "Epoch [   46/   50] | d_loss: 0.4283 | g_loss: 2.7100\n",
      "Epoch [   46/   50] | d_loss: 0.5795 | g_loss: 2.0778\n",
      "Epoch [   46/   50] | d_loss: 0.4040 | g_loss: 2.0133\n",
      "Epoch [   46/   50] | d_loss: 0.2358 | g_loss: 3.9266\n",
      "Epoch [   46/   50] | d_loss: 0.4122 | g_loss: 3.0189\n",
      "Epoch [   46/   50] | d_loss: 0.4862 | g_loss: 2.2341\n",
      "Epoch [   46/   50] | d_loss: 0.4692 | g_loss: 2.4060\n",
      "Epoch [   46/   50] | d_loss: 0.3342 | g_loss: 2.7956\n",
      "Epoch [   46/   50] | d_loss: 0.2526 | g_loss: 2.2540\n",
      "Epoch [   47/   50] | d_loss: 0.9177 | g_loss: 2.0744\n",
      "Epoch [   47/   50] | d_loss: 0.4356 | g_loss: 2.8074\n",
      "Epoch [   47/   50] | d_loss: 0.3143 | g_loss: 3.7175\n",
      "Epoch [   47/   50] | d_loss: 0.4259 | g_loss: 3.5919\n",
      "Epoch [   47/   50] | d_loss: 0.2259 | g_loss: 3.8167\n",
      "Epoch [   47/   50] | d_loss: 0.2839 | g_loss: 3.1807\n",
      "Epoch [   47/   50] | d_loss: 0.6067 | g_loss: 1.8425\n",
      "Epoch [   47/   50] | d_loss: 0.3040 | g_loss: 3.4991\n",
      "Epoch [   47/   50] | d_loss: 0.3313 | g_loss: 2.9455\n",
      "Epoch [   47/   50] | d_loss: 0.3278 | g_loss: 3.1684\n",
      "Epoch [   47/   50] | d_loss: 0.3220 | g_loss: 2.6507\n",
      "Epoch [   47/   50] | d_loss: 0.3983 | g_loss: 2.4824\n",
      "Epoch [   47/   50] | d_loss: 0.2736 | g_loss: 2.9347\n",
      "Epoch [   47/   50] | d_loss: 0.4133 | g_loss: 2.6343\n",
      "Epoch [   47/   50] | d_loss: 0.3212 | g_loss: 2.7550\n",
      "Epoch [   48/   50] | d_loss: 0.4782 | g_loss: 2.6504\n",
      "Epoch [   48/   50] | d_loss: 0.4261 | g_loss: 2.5825\n",
      "Epoch [   48/   50] | d_loss: 0.5199 | g_loss: 1.9093\n",
      "Epoch [   48/   50] | d_loss: 0.4097 | g_loss: 2.9535\n",
      "Epoch [   48/   50] | d_loss: 0.4079 | g_loss: 2.3849\n",
      "Epoch [   48/   50] | d_loss: 0.1944 | g_loss: 3.3197\n",
      "Epoch [   48/   50] | d_loss: 0.3325 | g_loss: 2.6440\n",
      "Epoch [   48/   50] | d_loss: 0.3528 | g_loss: 2.2936\n",
      "Epoch [   48/   50] | d_loss: 0.2321 | g_loss: 3.4992\n",
      "Epoch [   48/   50] | d_loss: 0.3544 | g_loss: 3.4199\n",
      "Epoch [   48/   50] | d_loss: 0.5110 | g_loss: 2.5316\n",
      "Epoch [   48/   50] | d_loss: 0.6646 | g_loss: 1.9493\n",
      "Epoch [   48/   50] | d_loss: 0.2747 | g_loss: 2.9159\n",
      "Epoch [   48/   50] | d_loss: 1.6332 | g_loss: 2.9502\n",
      "Epoch [   48/   50] | d_loss: 0.2620 | g_loss: 2.4522\n",
      "Epoch [   49/   50] | d_loss: 0.5177 | g_loss: 3.0106\n",
      "Epoch [   49/   50] | d_loss: 0.2905 | g_loss: 3.1342\n",
      "Epoch [   49/   50] | d_loss: 0.3547 | g_loss: 3.0553\n",
      "Epoch [   49/   50] | d_loss: 0.3558 | g_loss: 3.3901\n",
      "Epoch [   49/   50] | d_loss: 0.3705 | g_loss: 2.9014\n",
      "Epoch [   49/   50] | d_loss: 0.2717 | g_loss: 2.7348\n",
      "Epoch [   49/   50] | d_loss: 0.2003 | g_loss: 3.2810\n",
      "Epoch [   49/   50] | d_loss: 0.4844 | g_loss: 2.3095\n",
      "Epoch [   49/   50] | d_loss: 0.4270 | g_loss: 2.3467\n",
      "Epoch [   49/   50] | d_loss: 0.6294 | g_loss: 2.6665\n",
      "Epoch [   49/   50] | d_loss: 0.6138 | g_loss: 2.1448\n",
      "Epoch [   49/   50] | d_loss: 0.3969 | g_loss: 2.4649\n",
      "Epoch [   49/   50] | d_loss: 0.5809 | g_loss: 2.8990\n",
      "Epoch [   49/   50] | d_loss: 0.2897 | g_loss: 3.7391\n",
      "Epoch [   49/   50] | d_loss: 0.5921 | g_loss: 2.0060\n",
      "Epoch [   50/   50] | d_loss: 0.2597 | g_loss: 3.2888\n",
      "Epoch [   50/   50] | d_loss: 0.4704 | g_loss: 2.8633\n",
      "Epoch [   50/   50] | d_loss: 0.2809 | g_loss: 2.9419\n",
      "Epoch [   50/   50] | d_loss: 0.3317 | g_loss: 2.7043\n",
      "Epoch [   50/   50] | d_loss: 1.0651 | g_loss: 2.4056\n",
      "Epoch [   50/   50] | d_loss: 0.4299 | g_loss: 2.8623\n",
      "Epoch [   50/   50] | d_loss: 0.3877 | g_loss: 3.2001\n",
      "Epoch [   50/   50] | d_loss: 0.5930 | g_loss: 2.1438\n",
      "Epoch [   50/   50] | d_loss: 0.3693 | g_loss: 2.6327\n",
      "Epoch [   50/   50] | d_loss: 0.2608 | g_loss: 3.4632\n",
      "Epoch [   50/   50] | d_loss: 0.3582 | g_loss: 2.9739\n",
      "Epoch [   50/   50] | d_loss: 0.1845 | g_loss: 2.3387\n",
      "Epoch [   50/   50] | d_loss: 0.4708 | g_loss: 3.5106\n",
      "Epoch [   50/   50] | d_loss: 0.6167 | g_loss: 2.3534\n",
      "Epoch [   50/   50] | d_loss: 0.1102 | g_loss: 3.8317\n"
     ]
    }
   ],
   "source": [
    "# set number of epochs \n",
    "n_epochs = 50\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "DON'T MODIFY ANYTHING IN THIS CELL\n",
    "\"\"\"\n",
    "# call training function\n",
    "losses = train(D, G, n_epochs=n_epochs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Training loss\n",
    "\n",
    "Plot the training losses for the generator and discriminator, recorded after each epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f5115418dd8>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5120919208>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "losses = np.array(losses)\n",
    "plt.plot(losses.T[0], label='Discriminator', alpha=0.5)\n",
    "plt.plot(losses.T[1], label='Generator', alpha=0.5)\n",
    "plt.title(\"Training Losses\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Generator samples from training\n",
    "\n",
    "View samples of images from the generator, and answer a question about the strengths and weaknesses of your trained models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# helper function for viewing a list of passed in sample images\n",
    "def view_samples(epoch, samples):\n",
    "    fig, axes = plt.subplots(figsize=(16,4), nrows=2, ncols=8, sharey=True, sharex=True)\n",
    "    for ax, img in zip(axes.flatten(), samples[epoch]):\n",
    "        img = img.detach().cpu().numpy()\n",
    "        img = np.transpose(img, (1, 2, 0))\n",
    "        img = ((img + 1)*255 / (2)).astype(np.uint8)\n",
    "        ax.xaxis.set_visible(False)\n",
    "        ax.yaxis.set_visible(False)\n",
    "        im = ax.imshow(img.reshape((32,32,3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load samples from generator, taken while training\n",
    "with open('train_samples.pkl', 'rb') as f:\n",
    "    samples = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5115422e48>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = view_samples(-1, samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question: What do you notice about your generated samples and how might you improve this model?\n",
    "When you answer this question, consider the following factors:\n",
    "* The dataset is biased; it is made of \"celebrity\" faces that are mostly white\n",
    "* Model size; larger models have the opportunity to learn more features in a data feature space\n",
    "* Optimization strategy; optimizers and number of epochs affect your final result\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:** \n",
    "\n",
    "The biased database makes it difficult to create something new by the network. The faces are mostly white, they look very well - like celebrities look like. We could categorize pictures by angles where they look, hair color, skin color (ligher, darker). Maybe it could help.\n",
    "\n",
    "There are 2 photos angles (looking left an right). The output face picture size is very small (32x32), with small resolution, what makes huge binarization. Most of the pictures do not have chin. Probably having more angles and chin on the photos could help in training process. \n",
    "\n",
    "It seems that around 7-8 epoch the losses decrease so I guess we could stop at this level to save calculation time.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Submitting This Project\n",
    "When submitting this project, make sure to run all the cells before saving the notebook. Save the notebook file as \"dlnd_face_generation.ipynb\" and save it as a HTML file under \"File\" -> \"Download as\". Include the \"problem_unittests.py\" files in your submission."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
